Date 01-06-2022
Learning concepts of bash scripting
so far I've studied: 
1. How to make variables and assign them
2. How to make arguments
3. If-else statement in bash scripting
4. How to read the user input
Im currently using VIM Editor

CODE1 - 
Create and open newscript.sh file in vim editor: 
vim newscript.sh

!#/bin/bash

echo " making variable 1"
var_one=text.txt

echo "now using if-else statement to list some files in the directory and if there is no directory, we will make one"
if [ -d "directoryy" ]
           then var_two=$(ls directoryy)
else
           mkdir directoryy
echo "The directory has been made, if you have to list the files in it use $var_two"
echo " Testing if the $var_one is working "
fi

CODE2 ( to read the user input) - 
!#/bin/bash 
echo "Reading the user input"
read -p " Enter the password " $user_pwd
echo " Thanks for entering your password, Your password is: $user_pwd"

How to use arguments
- You can use arguments with the '$num' 
like in this CODE1 - the first variable that is - var_one=text.txt, 
Instead of text, we can assign it to $1, that is var_one=$1
Results -> at the time of executing the script in the terminal - write = bash filename.sh (argument_text) 
you can assign whatever value to variabe one if you use the aargument. 


02-06-2022
-Learnt about how the argument and parameter works. 
#!/bin/bash
echo " admin $1 "
echo " user $2" 
echo " This will tell how many parameters are being used : $# "
echo " This will show the listing of parameters in horizontal manner : $* "

-Learnt about the LOOPS 
1. For loop
CODE- 
Create and open loop.sh file in vim editor: 
vim loop.sh
->
#!/bin/bash
echo " The no. of parameters used : $# "
echo " The parameters used here are : $* "
for param in $*
do 
 echo $param
done
__________
This code will print the parameters, that is : bash loops.sh ok1 ok2 ok3
Output: The param used here are : ok1 ok2 ok3 
ok1
ok2
ok3

another example :
#!/bin/bash 

for param in $*
do
if [ -d "$param" ]
then
ls -l "$param"
fi
echo $param
done
OUTPUT: The param used here are : ok1 ok2 ok3 
total 4
-rw-r--r-- 1 kali kali 487 Jun  1 13:10 seconds.sh
ok1
ok2
ok3
___________
While loop
-It dont iterate through a list like for loop, the code is executed until the certain conditions are met.
-Simple code for understanding the while loop in bash scripting. 
CODE: !/bin/bash

echo " Practicing while loop "

sleep 1
sum=0
while true
do
        read -p " Please enter the score " score
        if [ "$score" == "q" ]
        then 
        break
        fi
        sum=$(($sum+$score))
        echo "The current score is: $score"
        echo "The total sum is: $sum"
done
___________ 
->now lets talk about FUNCTION 
its like->
name () {
# code goes here
}

so taking above's example of while loop, we can use function to define the logic and use it again when we need accordingly. 
it looks like: 
CODE: !/bin/bash

echo " Practicing while loop "

sleep 1
function sum_score {
sum=0
while true
do
        read -p " Please enter the score " score
        if [ "$score" == "q" ]
        then 
        break
        fi
        sum=$(($sum+$score))
        echo "The current score is: $score"
        echo "The total sum is: $sum"
done
}

sum_score
________________




